# -*- coding: utf-8 -*-
"""data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f02EOPDILWaj9I-MFABLALamTWqeKRWv
"""

import torch
from torch.utils.data import Dataset, DataLoader
import torchvision.transforms as transforms

class SegmentationDataset(Dataset):
    def __init__(self, images, masks, img_size, transform=None):
        """
        images: numpy массив (N, 572, 572, 1)
        masks: numpy массив (N, 572, 572, 2)
        target_size: конечный размер (h, w)
        transform: аугментации (если есть)
        """
        self.images = images
        self.masks = masks
        self.img_size = img_size
        self.transform = transform

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        # Загружаем одно изображение и маску
        image = self.images[idx]  # (572, 572, 1)
        mask = self.masks[idx]    # (572, 572, 2)

        # Преобразуем в тензоры (без нормализации, U-Net обычно сам обучается правильно)
        image = torch.tensor(image, dtype=torch.float32).permute(2, 0, 1)  # (1, 572, 572)
        mask = torch.tensor(mask, dtype=torch.float32).permute(2, 0, 1)    # (2, 572, 572)

        # Изменяем размер до (160,1600) (кроме количества каналов)
        resize = transforms.Resize(self.img_size, antialias=True)
        image = resize(image)
        mask = resize(mask)

        return image, mask


# Создаём Dataset
dataset_train = SegmentationDataset(x_train, y_train, param.img_size)
dataset_test = SegmentationDataset(x_test, y_test,param.img_size)

# DataLoader с перемешиванием и разбиением на батчи
train_dl = DataLoader(dataset_train, batch_size=10, shuffle=True, num_workers=2)
val_dl = DataLoader(dataset_test, batch_size=4, shuffle=False, num_workers=2)


print("Проверка формирования Data Loader")
print(f"Train dataset size: {len(dataset_train)}")
print(f"Test dataset size: {len(dataset_test)}")

x, y = dataset_train[0]  # Берем первую пару изображение-маска
print(f"Image shape: {x.shape}, dtype: {x.dtype}")
print(f"Mask shape: {y.shape}, dtype: {y.dtype}")

# Проверка диапазона значений
print(f"Image min/max: {x.min()}/{x.max()}")
print(f"Mask unique values: {np.unique(y)}")  # Должно быть [0, 1] или [0, 1, 2, ...]